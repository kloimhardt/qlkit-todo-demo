(ns qlkit-todo\server
  (:require phel\http)
  (:require phel\html :refer [html doctype])
  (:require qlkit-todo\qlkit\core :as ql)
  # (:require qlkit-todo\parsers :as parsers)
  (:require qlkit-todo\parsers-db :as parsers-db)
  (:require qlkit-todo\little-clojure\core :as clj
            :refer [eprint atom writefile deref reset!]))

# ./vendor/bin/phel repl
# (load "./phel-backend/server.phel")
# php -S localhost:8000
# mysql -u mkloim -p
#     mkloimpwd
# use h37u320_menagerie

(def eval-atom (atom nil))

(defn read-edn [edn-string]
  (let [fname (str "tmp" (php/uniqid))
        phel-string
        (reduce (fn[s [a b]] (php/str_replace a b s))
                edn-string
                [["{" "@{"] ["#uuid" ""] ["," ""] ["(" "["] [")" "]"]])]
    (clj/writefile fname (str "(reset! eval-atom " phel-string ")"))
    (load fname)
    (php/unlink fname)
    (deref eval-atom)))

(defn endpoint [_]
  (let [body (php/file_get_contents "php://input")
        query (read-edn body)
        result (clj/write-edn (ql/parse-query query))]
    @{:status  200
      :body result}))

(defn home-html [cljs-code]
  (html
    (doctype :html5)
    [:html
     [:head
      [:meta @{:charset "UTF-8"}]
      [:meta @{:name "viewport" :content "width=device-width, initial-scale=1"}]
      [:link @{:rel "shortcut icon" :href "data:,"}]
      [:link @{:rel "apple-touch-icon" :href "data:,"}]
      [:title "Qlkit-todo"]]
     [:body
      [:div @{:id "app"}]
      [:script @{:type "application/javascript"
                 :src "./js/compiled/qlkit_todo.js"}]]]))

(defn home-render [_]
  @{:status 200
    :body (home-html nil)})

(defstruct route [method url query page])

(def routes
  [(route "GET" "/" "" home-render)
   (route "POST" "/" "endpoint=" endpoint)
   (route "POST" "/endpoint" "" endpoint)])

(defn route-match [request routes]
  (let
      [query (get (get request :uri) :query)
       altquery (if (nil? query) "" query)
       route (find
               (fn [route]
                 (and
                   (=
                     (get route :url)
                     (get (get request :uri) :path))
                   (=
                     (get route :method)
                     (get request :method))
                   (=
                     (get route :query) altquery)))
               routes)]
    ((get route :page) request)))

(defn emit-response [response]
  (let [rsp (http/create-response-from-table response)]
    (http/emit-response rsp)))

(let [request (http/request-from-globals)
      conn (php/mysqli_connect
             "localhost" "mkloim" "mkloimpwd" "h37u320_menagerie")]
  (ql/mount @{:parsers @{:read   parsers-db/read
                         :mutate parsers-db/mutate}
              :conn conn})
  (parsers-db/create-tables-if-necessary conn)
  (emit-response (route-match request routes))
  (php/mysqli_close conn))
